[{"content":"什么叫图床 图床就是将图片上传到相关服务商或者个人服务器，通过上传文件的网络地址进行远程访问。可以方便快速的将图片插入到文章中，方便后续图片二次使用、迁移、分享。\n常用图床的几种方式 VPS自建：通过购买服务器搭建图床程序，比如easyimage，lsky-pro等。 优点：方便，快捷，空间大 缺点：速度取决于vps的线路，迁移服务时大量数据需要迁移。 云端oss储存+cdn 优点：稳定，速度快 缺点：付费（腾讯cos/阿里oss+cdn(cdn需备案)）。免费的额度有限（Backblaze B2 + Cloudflare）。 Github + JsDelivr(cdn) 优点：github绝对稳定，jsdelivr充当github的cdn加速 缺点：虽然有加速，速度也算不上快，属中等。 本篇介绍CLoudFlare R2+Picgo 方案\nCLoudFlare R2 免费用户有10GB/月的存储额度（30天内每天储存峰值的平均值），对于小网站基本足够，超额的存储是$0.015/GB/月，\n标准储存：日常存储容量前10GB/月免费（30天内每天储存峰值的平均值） Daily Class A Transactions Caps：日常B类事务前100万次免费（A类事务包括下载、获取文件） Daily Class B Transactions Caps：日常A类事务前1000万次免费（B类事务包括创建存储桶、列举存储桶、列举文件版本、列举Keys） 实现目的 1.自由在MD，网站中引用图片（picgo上传） 2.防止恶意被刷流量（虽然CloudFlare只收取额外的储存费用，但被刷流量多了容易被封号）\n自定义域名代替原域名（出现问题直接断开和原域名之间的跳转） 设定缓存规则（有人盗刷也是刷缓存） 防盗链（只在规定的网站使用） CloudFlare R2 注册账号 注册账号需要绑定一种支付方式（不扣费，只是用来选择支付方式），可以用信用卡，visa，paypal。\n注册地址：https://dash.cloudflare.com/sign-up，验证过邮箱后即可使用。\n开通 CloudFlare R2 点击右侧的R2对象储存。\n在弹出的界面输入付款方式（信用卡，paypal都可以）\n对于中小网站来说，一般超不了。 确认后就可以开通R2对象储存了。\n创建储存桶及桶设置 自定义图床域名 进入桶设置界面\n设定访问桶的域名，有两种方法，一种是有一个私有域名（需托管在Cloudflare上），另一个是用R2.dev子域名\n私有域名（二选一） 继续之后，点连接域，会自动生成dns记录。\n之后就能浏览器 https://\u0026lt;自定义域名\u0026gt;/\u0026lt;文件名\u0026gt;访问存储桶里的文件了。\nPS：如果域名不托管在CloudFlare，可以单独托管二级\\三级域名，只需要给二级域名添加一条NS记录指向原托管即可。\nR2.dev子域名（二选一） 点击允许访问，就可以用 https://pub-853c2f66b8ef43ae98ecd186f4be34f8.r2.dev访问桶\n设定缓存规则 缓存规则一般设定两个：浏览器缓存和边缘缓存。 浏览器缓存：访问后，所需文件储存在浏览器的本地目录，在一段时间内，再次访问优先访问本地文件 边缘缓存：访问后，缓存在最近的CDN存一份，在一段时间内，优先访问CDN中的文件\n进入域名页面-\u0026gt;规则-\u0026gt;页面规则\n创建页面规则\nURL 填 img.a.com/* 添加设置：缓存级别 – 缓存所有内容 添加设置：浏览器缓存 TTL – 几个小时自己选（8小时） 添加设置：边缘缓存 TTL – 一个月（图片内容只有存在或者删除两个状态，所以越长越好） 保存。此时如果有人刷流量，理论上图片都是本地缓存或者CDN缓存给的，不会走到R2对象存储。\n防盗链设置 只能通过指定的网站来访问（防君子不防小人，可以伪造refer信息，照样刷流量）。 但是还是有点作用，比如别人爬取文章盗用的时候，图片是无法访问的。\n安全性-\u0026gt;WAF，创建规则\n设置 CORS 策略（可选） 一般不需要设置（出于安全考虑这里也不建议设置）。如果遇到 R2 作为博客图床，但是图片打不开的情况，F12 控制台发现遇到 CORS 问题，则需要配置。\n官方文档：Configure CORS\n进入你想设置 CORS 的存储桶的设置，拉到下面：\n配置为允许特定源 比如要设置为允许两个域名：\n[ { \u0026#34;AllowedOrigins\u0026#34;: [ \u0026#34;https://blog.a.com\u0026#34;, \u0026#34;https://blog.b.top\u0026#34; ], \u0026#34;AllowedMethods\u0026#34;: [ \u0026#34;GET\u0026#34; ] } ] 配置为所有网站源可访问（多平台文章引用）\n[ { \u0026#34;AllowedOrigins\u0026#34;: [ \u0026#34;*\u0026#34; ], \u0026#34;AllowedMethods\u0026#34;: [ \u0026#34;GET\u0026#34; ] } ] 配置为允许所有源 如果上面配置为特定源后仍然不能修复问题，或者作为随机图片 API 的图床提供服务需要设置为所有源可访问，那么需要如下设置：\n[ { \u0026#34;AllowedOrigins\u0026#34;: [ \u0026#34;*\u0026#34; ], \u0026#34;AllowedMethods\u0026#34;: [ \u0026#34;GET\u0026#34;, \u0026#34;POST\u0026#34;, \u0026#34;PUT\u0026#34;, \u0026#34;DELETE\u0026#34;, \u0026#34;HEAD\u0026#34; ], \u0026#34;AllowedHeaders\u0026#34;: [ \u0026#34;*\u0026#34; ] } ] WEB API设置 有的api令牌就可以用软件（PICGO）自动上传图片了。\n创建令牌\n需要选择内容 令牌名 权限（对象读和写） 指定储存桶 TTL时间（永久）\n记住生成的密钥，picgo软件里面设置需要。\npicgo设置 在插件设置中，添加常用插件。 S3插件：用来登录S3的图床 compress-next:用来压缩图片至webp。 watermark：给图片打水印 autoback：用来备份图床\n安装好后，里面就新增了amazon S3的图床设置。\n这里有几项配置需要尤其注意。\n应用密钥 ID，填写 R2 API 中的 Access Key ID（访问密钥 ID） 应用密钥，填写 R2 API 中的Secret Access Key（机密访问密钥） 桶名，填写 R2 中创建的 Bucket 名称，如创建R2的桶的名字 img 文件路径，上传到 R2 中的文件路径，这里选择使用 {fileName}.{extName} (或者{fullName})来保留原文件的文件名和扩展名。 自定义节点，填写 R2 API 中的「为 S3 客户端使用管辖权地特定的终结点」，即 xxx.r2.cloudflarestorage.com格式的 S3 Endpoint 自定义域名，填写上文生成的https://xxx.r2.dev格式的域名或自定义域名，如我配置的https://img.a.com ForcePathStyle：no关闭，否则会在最终路径里面显示有桶名。 拒绝无效TLS证书连接 ：yes开启，如果出现证书错误可以关闭 ACL访问控制列表：public-read Bucket前缀：false 完成上述配置后，我们就可以在「上传区」直接拖入文件进行图片上传了，如上传后显示无误则为配置成功，生成的链接会自动在系统剪贴板中，直接在需要的地方粘贴即可。\nPS： 1.picgo还可以自定义连接格式（Picgo→自定义链接格式）![$fileName]($url),之后上传链接界面选custom即可\n2.安装picgo的vscode插件-markdown transfer img，可以批量替换md中图片至云端。 3.使用piclist来平替picgo，piclist功能更多\n","permalink":"http://localhost:1313/posts/picgo-r2/","summary":"在Picgo上配置Cloudflare-R2图床","title":"在Picgo上配置Cloudflare-R2图床"},{"content":"正式开始 请全程在Windows上操作\n我们首先需要安装Scoop，这是一个适用于Windows的包管理器，个人认为非常好用\nScoop默认会安装到C盘，如果你想要换盘请按需更改\n$env:SCOOP=\u0026#39;D:\\Scoop\u0026#39; $env:SCOOP_GLOBAL=\u0026#39;D:\\ScoopApps\u0026#39; [Environment]::SetEnvironmentVariable(\u0026#39;SCOOP\u0026#39;, $env:SCOOP, \u0026#39;User\u0026#39;) [Environment]::SetEnvironmentVariable(\u0026#39;SCOOP_GLOBAL\u0026#39;, $env:SCOOP_GLOBAL, \u0026#39;Machine\u0026#39;) 安装Scoop：\nSet-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser Invoke-RestMethod -Uri https://get.scoop.sh | Invoke-Expression 如果你以管理员的身份会安装失败，请切换为普通用户。若想强制以管理员身份安装Scoop请使用\ngithub原帖\n出于安全考虑，默认情况下已禁用管理员控制台下的安装。如果您知道自己在做什么并希望以管理员身份安装Scoop，请下载安装程序并在提升的控制台中手动执行它，使用 -RunAsAdmin 参数。以下是示例：\nirm get.scoop.sh -outfile \u0026#39;install.ps1\u0026#39; .\\install.ps1 -RunAsAdmin [-OtherParameters ...] # 如果你想要一行解决： iex \u0026#34;\u0026amp; {$(irm get.scoop.sh)} -RunAsAdmin\u0026#34; 安装Hugo框架：\nscoop install hugo 然后选择一个你喜欢的文件夹创建你的站点。 myblog 即你的站点文件夹名称\nhugo new site myblog cd myblog 安装PaperMod主题：\ngit clone https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod 站点根目录会有一个 hugo.toml。我推荐使用YAML。将文件重命名为 hugo.yaml。粘贴并更改以下内容\nbaseURL: \u0026#34;https://站点url\u0026#34; title: \u0026#34;网站标题\u0026#34; LanguageCode: \u0026#34;zh-CN\u0026#34; theme: \u0026#34;PaperMod\u0026#34; # 启用首页个人简介展示 params: # 是否启用评论。你需要自己配置，或者直接引入Giscus等评论系统 comments: false # 是否显示代码复制按钮 ShowCodeCopyButtons: true # 是否显示面包屑导航 ShowBreadCrumbs: false # 是否显示阅读时间 ShowReadingTime: true # 是否显示分享按钮 ShowShareButtons: true # 分享按钮配置 # ShareButtons: [\u0026#34;linkedin\u0026#34;, \u0026#34;twitter\u0026#34;] # 是否禁用主题切换按钮 disableThemeToggle: false assets: favicon: \u0026#34;/你的/网站图标.jpg\u0026#34; # 需要在static文件夹放置对应的图片 iconHeight: 35 # 首页信息配置 homeInfoParams: Title: \u0026#34;首页展示的标题\u0026#34; Content: \u0026gt; 首页展示的文本 # 设置网站头像和首页头像 profileMode: enabled: false # 设为 true 将完全替换 homeInfoParams # 网站头像设置 (显示在导航栏) label: text: \u0026#34;左上角显示的文本\u0026#34; icon: \u0026#34;/你的/左上角显示的图片.jpg\u0026#34; # 这将显示在导航栏标题旁边。需要在static文件夹放置对应的图片 iconHeight: 35 # 社交图标 (显示在简介下方) socialIcons: - name: bilibili url: \u0026#34;\u0026#34; - name: github url: \u0026#34;\u0026#34; - name: telegram url: \u0026#34;\u0026#34; # 可以添加更多社交图标 https://github.com/adityatelange/hugo-PaperMod/wiki/Icons # 顶部导航栏的快捷链接 menu: main: - identifier: categories name: 分类 url: /categories/ weight: 10 - identifier: tags name: 标签 url: /tags/ weight: 20 - identifier: archives name: 归档 url: /archives/ weight: 30 - identifier: search name: 搜索 url: /search/ weight: 40 # 可以添加更多导航链接。weight的值越高排序越靠后 # 如果要启用搜索功能，需要添加这个 outputs: home: - HTML - RSS - JSON # 必须，用于搜索功能 然后我们需要分别配置分类、标签、归档和搜索页\n创建 content\\categories\\_index.md 写入：\n--- title: 分类 layout: categories --- 创建 content\\tags\\_index.md 写入：\n--- title: 标签 layout: tags --- 创建 content\\archives.md 写入：\n--- title: 归档 layout: archives --- 创建 content\\search.md 写入：\n--- title: \u0026#34;搜索\u0026#34; layout: \u0026#34;search\u0026#34; --- 然后我们要更改默认的文章创建模板\n在 archetypes\\default.md 写入：\n--- title: {{ replace .File.ContentBaseName \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }} published: {{ .Date }} summary: \u0026#34;文章简介\u0026#34; cover: image: \u0026#34;文章封面图。也支持HTTPS\u0026#34; tags: [标签1, 标签2] categories: \u0026#39;文章所处的分类\u0026#39; draft: false lang: \u0026#39;\u0026#39; --- 接下来我们就可以通过命令来创建文章，并开始写作了。注意，最终构建的文章URL是你的文章的文件名。比如：https://你的网站.com/posts/first 所以文章文件名尽量简短，这并不会影响你的文章标题\nhugo new posts/first.md 当我们写完一篇文章想要预览网站，可以使用\nhugo server 当我们想要将站点发布到Vercel、Cloudflare Pages等静态网站托管平台可以将我们的 myblog 作为一个Git存储库提交到Github\n根目录：./\n输出目录：public\n构建命令：hugo --gc\n环境变量（适用于Vercel）： Key：HUGO_VERSION Value：0.145.0\n对象存储存图中间件代码： import keyboard import pyperclip from PIL import ImageGrab, Image import io import boto3 from botocore.config import Config import time import uuid import pyautogui import os from io import BytesIO # 示例配置 # # R2 配置 # R2_CONFIG = { # \u0026#39;account_id\u0026#39;: \u0026#39;11111111111111111\u0026#39;, # \u0026#39;access_key_id\u0026#39;: \u0026#39;11111111111111111\u0026#39;, # \u0026#39;secret_access_key\u0026#39;: \u0026#39;11111111111111111\u0026#39;, # \u0026#39;bucket_name\u0026#39;: \u0026#39;11111111111111111\u0026#39; # } # # OSS 配置 # OSS_CONFIG = { # \u0026#39;url\u0026#39;: \u0026#39;oss.onani.cn\u0026#39;, # \u0026#39;prefix\u0026#39;: \u0026#39;/fuwari-blog/img\u0026#39; # } ######################################################### # R2 配置 R2_CONFIG = { \u0026#39;account_id\u0026#39;: \u0026#39;\u0026#39;, \u0026#39;access_key_id\u0026#39;: \u0026#39;\u0026#39;, \u0026#39;secret_access_key\u0026#39;: \u0026#39;\u0026#39;, \u0026#39;bucket_name\u0026#39;: \u0026#39;\u0026#39; } # OSS 配置 OSS_CONFIG = { \u0026#39;url\u0026#39;: \u0026#39;\u0026#39;, \u0026#39;prefix\u0026#39;: \u0026#39;\u0026#39; } ######################################################### def init_r2_client(): \u0026#34;\u0026#34;\u0026#34;初始化 R2 客户端\u0026#34;\u0026#34;\u0026#34; return boto3.client( \u0026#39;s3\u0026#39;, endpoint_url=f\u0026#39;https://{R2_CONFIG[\u0026#34;account_id\u0026#34;]}.r2.cloudflarestorage.com\u0026#39;, aws_access_key_id=R2_CONFIG[\u0026#39;access_key_id\u0026#39;], aws_secret_access_key=R2_CONFIG[\u0026#39;secret_access_key\u0026#39;], config=Config(signature_version=\u0026#39;s3v4\u0026#39;), region_name=\u0026#39;auto\u0026#39; ) def get_image_from_clipboard(): \u0026#34;\u0026#34;\u0026#34;从剪贴板获取图片\u0026#34;\u0026#34;\u0026#34; try: image = ImageGrab.grabclipboard() if image is None: return None # 如果是列表（多个文件），取第一个 if isinstance(image, list): if len(image) \u0026gt; 0: # 如果是图片文件路径，打开它 try: return Image.open(image[0]) except Exception as e: print(f\u0026#34;打开图片文件失败: {e}\u0026#34;) return None return None # 如果直接是 Image 对象 if isinstance(image, Image.Image): return image return None except Exception as e: print(f\u0026#34;获取剪贴板图片失败: {e}\u0026#34;) return None def convert_to_webp(image): \u0026#34;\u0026#34;\u0026#34;将图片转换为 webp 格式\u0026#34;\u0026#34;\u0026#34; if not image: return None try: buffer = BytesIO() # 确保图片是 RGB 模式 if image.mode in (\u0026#39;RGBA\u0026#39;, \u0026#39;LA\u0026#39;): background = Image.new(\u0026#39;RGB\u0026#39;, image.size, (255, 255, 255)) background.paste(image, mask=image.split()[-1]) image = background elif image.mode != \u0026#39;RGB\u0026#39;: image = image.convert(\u0026#39;RGB\u0026#39;) image.save(buffer, format=\u0026#34;WEBP\u0026#34;, quality=80) return buffer.getvalue() except Exception as e: print(f\u0026#34;转换图片失败: {e}\u0026#34;) return None def upload_to_r2(image_data): \u0026#34;\u0026#34;\u0026#34;上传图片到 R2\u0026#34;\u0026#34;\u0026#34; if not image_data: return None client = init_r2_client() # 生成基础文件名 base_filename = f\u0026#34;{uuid.uuid4()}.webp\u0026#34; filename = base_filename try: # 检查文件是否已存在 attempt = 1 while True: try: # 尝试获取文件信息，如果文件存在会返回数据，不存在会抛出异常 client.head_object( Bucket=R2_CONFIG[\u0026#39;bucket_name\u0026#39;], Key=f\u0026#34;{OSS_CONFIG[\u0026#39;prefix\u0026#39;].strip(\u0026#39;/\u0026#39;)}/{filename}\u0026#34; ) # 如果文件存在，修改文件名 name_without_ext = base_filename.rsplit(\u0026#39;.\u0026#39;, 1)[0] filename = f\u0026#34;{name_without_ext}_{attempt}.webp\u0026#34; attempt += 1 print(f\u0026#34;文件名已存在，尝试重命名为: {filename}\u0026#34;) except client.exceptions.ClientError as e: # 如果是 404 错误，说明文件不存在，可以使用这个文件名 if e.response[\u0026#39;Error\u0026#39;][\u0026#39;Code\u0026#39;] == \u0026#39;404\u0026#39;: break raise e # 其他错误则抛出 # 上传文件 client.put_object( Bucket=R2_CONFIG[\u0026#39;bucket_name\u0026#39;], Key=f\u0026#34;{OSS_CONFIG[\u0026#39;prefix\u0026#39;].strip(\u0026#39;/\u0026#39;)}/{filename}\u0026#34;, Body=image_data, ContentType=\u0026#39;image/webp\u0026#39; ) return filename except Exception as e: print(f\u0026#34;上传失败: {e}\u0026#34;) return None def generate_markdown_link(filename): \u0026#34;\u0026#34;\u0026#34;生成 Markdown 图片链接\u0026#34;\u0026#34;\u0026#34; if not filename: return None url = f\u0026#34;https://{OSS_CONFIG[\u0026#39;url\u0026#39;]}{OSS_CONFIG[\u0026#39;prefix\u0026#39;]}/{filename}\u0026#34; return f\u0026#34;![]({url})\u0026#34; def type_markdown_link(markdown_link): \u0026#34;\u0026#34;\u0026#34;模拟键盘输入 Markdown 链接\u0026#34;\u0026#34;\u0026#34; if not markdown_link: return pyperclip.copy(markdown_link) pyautogui.hotkey(\u0026#39;ctrl\u0026#39;, \u0026#39;v\u0026#39;) def handle_upload(): \u0026#34;\u0026#34;\u0026#34;处理图片上传的主函数\u0026#34;\u0026#34;\u0026#34; print(f\u0026#34;\\n[{time.strftime(\u0026#39;%Y-%m-%d %H:%M:%S\u0026#39;)}] 收到粘贴请求\u0026#34;) print(\u0026#34;正在检查剪贴板...\u0026#34;) # 获取剪贴板图片 image = get_image_from_clipboard() if not image: print(\u0026#34;❌ 剪贴板中没有图片\u0026#34;) return print(\u0026#34;✅ 获取到剪贴板图片\u0026#34;) # 转换为 webp print(\u0026#34;正在转换为 WebP 格式...\u0026#34;) image_data = convert_to_webp(image) if not image_data: print(\u0026#34;❌ 图片转换失败\u0026#34;) return print(f\u0026#34;✅ 转换完成，大小: {len(image_data)/1024:.2f}KB\u0026#34;) # 上传到 R2 print(\u0026#34;正在上传到 R2...\u0026#34;) filename = upload_to_r2(image_data) if not filename: print(\u0026#34;❌ 上传失败\u0026#34;) return print(f\u0026#34;✅ 上传成功，文件名: {filename}\u0026#34;) # 生成并输入 Markdown 链接 markdown_link = generate_markdown_link(filename) if markdown_link: print(f\u0026#34;生成的 URL: https://{OSS_CONFIG[\u0026#39;url\u0026#39;]}{OSS_CONFIG[\u0026#39;prefix\u0026#39;]}/{filename}\u0026#34;) print(f\u0026#34;模拟键入: {markdown_link}\u0026#34;) type_markdown_link(markdown_link) print(\u0026#34;✅ 操作完成\u0026#34;) def main(): \u0026#34;\u0026#34;\u0026#34;主函数\u0026#34;\u0026#34;\u0026#34; print(\u0026#34;=\u0026#34; * 50) print(\u0026#34;R2 图片上传插件已启动\u0026#34;) print(f\u0026#34;当前配置:\u0026#34;) print(f\u0026#34;- OSS 域名: {OSS_CONFIG[\u0026#39;url\u0026#39;]}\u0026#34;) print(f\u0026#34;- 存储路径: {OSS_CONFIG[\u0026#39;prefix\u0026#39;]}\u0026#34;) print(f\u0026#34;- R2 存储桶: {R2_CONFIG[\u0026#39;bucket_name\u0026#39;]}\u0026#34;) print(\u0026#34;使用 Ctrl+Alt+V 上传剪贴板中的图片\u0026#34;) print(\u0026#34;=\u0026#34; * 50) # 注册快捷键 keyboard.add_hotkey(\u0026#39;ctrl+alt+v\u0026#39;, handle_upload) # 保持程序运行 keyboard.wait() if __name__ == \u0026#34;__main__\u0026#34;: main() ","permalink":"http://localhost:1313/posts/hugo/","summary":"Hugo博客搭建教程以及配置调优","title":"Hugo博客搭建教程以及配置调优"},{"content":"更新时间：2025-02-28 音乐名称：Troublemaker\n歌手：Akon\n专辑：Troublemaker\n更新时间：2025-02-27 音乐名称：Whiskey and Morphine\n歌手：Alexander Jean\n专辑：Head High\n更新时间：2025-02-27 音乐名称：PARANOIA\n歌手：HEARTSTEEL / BAEKHYUN / tobi lou / ØZI / League of Legends / Cal Scruby\n专辑：PARANOIA\n","permalink":"http://localhost:1313/posts/musicrecommend/","summary":"音乐推荐","title":"音乐推荐"},{"content":"删除local-lvm lvremove pve/data\rlvextend -l +100%FREE -r pve/root 挂载swap文件 删除pve自带swap分区\nswapoff -a\rlvremove /dev/pve/swap\rlvresize -l +100%FREE /dev/pve/root\r以文件形式\r#创建一个16G的swap，bs * count =16G\rdd if=/dev/zero of=/swapfile bs=1G count=16\r#配置安全的权限\rchmod 0600 /swapfile\r#格式化成swap\rmkswap /swapfile\r#挂载swap\rswapon /swapfile\r#验证\rfree -h\rnano /etc/fstab 开机自动挂载\r/swapfile swap swap defaults 0 0\r调整swap阈值\rvi /etc/sysctl.conf sysctl -p 硬件直通 Intel CPU\r对于Intel CPU，添加 intel_iommu=on，操作如下：\r1、Shell 里面输入命令：nano /etc/default/grub\rroot@pve:~# nano /etc/default/grub\r2、在里面找到：GRUB_CMDLINE_LINUX_DEFAULT=\u0026#34;quiet\u0026#34;\r然后修改为\rGRUB_CMDLINE_LINUX_DEFAULT=\u0026#34;quiet intel_iommu=on\u0026#34;\r编辑完成后，使用快捷键 Ctrl + O 回车保存文件，Ctrl + X 退出编辑器。\r3、使用命令 update-grub 保存更改并更新grub\rroot@pve:~# update-grub\r4、更新完成后，使用命令 reboot 重启PVE系统\rroot@pve:~# reboot\r从命令行运行 dmesg | grep -e DMAR -e IOMMU 如果没有输出，则说明有问题。\r如果有,可基本确认这个过程顺利完成! 接下来就可以为虚拟机正常的添加硬件直通了。 -\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;-\n增加虚拟化驱动，加载vifo系统模块 这仅在必要时启用IOMMU转换，将iommu分组相关的内核模块启用，从而可以提高VM中未使用的PCIe设备的性能。\n然后是修改 /etc/modules 文件\nroot@pve:~# nano /etc/modules\n添加如下内容\rvfio\rvfio_iommu_type1\rvfio_pci\rvfio_virqfd\rCTRL +X 退出编辑，按Y保存，按回车退出。\r更新initramfs\rupdate-initramfs -u -k all 修改系统源 # 将此文件的中的所有内容注释掉\rnano /etc/apt/sources.list.d/pve-enterprise.list\r# 下载中科大的GPG KEY\rwget https://mirrors.ustc.edu.cn/proxmox/debian/proxmox-release-bookworm.gpg -O /etc/apt/trusted.gpg.d/proxmox-release-bookworm.gpg\r# 使用Proxmox非企业版源\recho \u0026#34;deb https://mirrors.ustc.edu.cn/proxmox/debian bookworm pve-no-subscription\u0026#34; \u0026gt; /etc/apt/sources.list.d/pve-no-subscription.list\r# 将Debian官方源替换为中科大源\rsed -i \u0026#39;s|^deb http://ftp.debian.org|deb https://mirrors.ustc.edu.cn|g\u0026#39; /etc/apt/sources.list\rsed -i \u0026#39;s|^deb http://security.debian.org|deb https://mirrors.ustc.edu.cn/debian-security|g\u0026#39; /etc/apt/sources.list\r# 替换Ceph源\recho \u0026#34;deb https://mirrors.ustc.edu.cn/proxmox/debian/ceph-quincy bookworm no-subscription\u0026#34; \u0026gt; /etc/apt/sources.list.d/ceph.list\r# 替换CT镜像下载源\rsed -i \u0026#39;s|http://download.proxmox.com|https://mirrors.ustc.edu.cn/proxmox|g\u0026#39; /usr/share/perl5/PVE/APLInfo.pm 删除订阅弹窗 sed -Ezi.bak \u0026#34;s/(Ext.Msg.show\\(\\{\\s+title: gettext\\(\u0026#39;No valid sub)/void\\(\\{ \\/\\/\\1/g\u0026#34; /usr/share/javascript/proxmox-widget-toolkit/proxmoxlib.js \u0026amp;\u0026amp; systemctl restart pveproxy.service # 执行完成后，浏览器Ctrl+F5强制刷新缓存\n","permalink":"http://localhost:1313/posts/pveconfig/","summary":"Pve开源虚拟化常见配置","title":"Pve开源虚拟化常见配置"},{"content":"安装Docker #更新系统索引以及安装必备组件 sudo apt-get update sudo apt-get install \\ apt-transport-https \\ ca-certificates \\ curl \\ gnupg \\ lsb-release 添加docker源GPG curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg #添加docker源 #官方源 echo \\ \u0026#34;deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian \\ $(lsb_release -cs) stable\u0026#34; | sudo tee /etc/apt/sources.list.d/docker.list \u0026gt; /dev/null #阿里源 echo \\ \u0026#34;deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://mirrors.aliyun.com/docker-ce/linux/debian \\ $(lsb_release -cs) stable\u0026#34; | sudo tee /etc/apt/sources.list.d/docker.list \u0026gt; /dev/null #更新源索引以及安装docker sudo apt update sudo apt install docker-ce docker-ce-cli containerd.io docker-compose-plugin 使用Docker安装MinIO docker run -d--name minio -p 9000:9000 \\ -p 9001:9001 \\ -e\u0026#34;MINIO ROOT USER=minioadmin\u0026#34; \\ -e\u0026#34;MINIO ROOT PASSWORD=minioadmin\u0026#34; \\ -v /root/minio:/data \\ minio/minio server /data --console-address\u0026#34;:9001\u0026#34; 放行防火墙端口 放行云服务器安全组或者防火墙9000以及9001端口\n访问9001端口测试 默认用户名密码为之前的docker参数 建议在docker参数定义时就定义要使用的管理员用户名密码\n用户名：minioadmin\n密码：minioadmin\n反向代理 9000端口为实际api访问端口 9001为web页面控制台端口\n反向代理web页面 server { listen 80; listen 443 ssl http2; server_name web页面控制台访问域名; ssl_certificate 证书文件路径; ssl_certificate_key 证书密钥路径; ssl_session_cache shared:SSL:1m; ssl_session_timeout 10m; ssl_ciphers PROFILE=SYSTEM; ssl_prefer_server_ciphers on; location / { proxy_pass http://127.0.0.1:9001; proxy_set_header Host 127.0.0.1; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header REMOTE-HOST $remote_addr; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection $connection_upgrade; proxy_http_version 1.1; add_header X-Cache $upstream_cache_status; } 反向代理api端口 server { listen 80; listen 443 ssl http2; server_name api访问域名; ssl_certificate 证书文件路径; ssl_certificate_key 证书密钥路径; ssl_session_cache shared:SSL:1m; ssl_session_timeout 10m; ssl_ciphers PROFILE=SYSTEM; ssl_prefer_server_ciphers on; location / { proxy_pass http://127.0.0.1:9000; proxy_set_header Host 127.0.0.1; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header REMOTE-HOST $remote_addr; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection $connection_upgrade; proxy_http_version 1.1; add_header X-Cache $upstream_cache_status; } 测试访问 创建bucket并设置公共权限 上传一张图片到bucket进行访问测试\n输入刚刚设置的api访问域名/bucket名称/文件名称 例如https://obj.minio.com/data/test.png进行测试\n","permalink":"http://localhost:1313/posts/buildingagraphbedwithminio/","summary":"使用MinIO搭建图床","title":"使用MinIO搭建图床"},{"content":" useradd -d指定目录\n删除用户milan，但是要保留家目录，userdelmilan\n删除用户以及用户主目录，比如tom，userdel-r tom\n修改用户密码 passwd 用户名\n创建一个组mojiao\n把zwj放入mojiao\n指令:usermod-g mojiao zwj\n每行的含义:用户名：口令：用户标识号：组标识号：注释性描述：主目录：登录shell\n每行的含义：登录名：加密口令：最后一次修改时间：最小时间间隔：最大时间间隔：警告时间：不活动时间：失效时间：标志\n每行含义：组名：口令：组标识号：组内用户列表\ncd ~或者cd回到自己的家目录\ncd..回到当前目录的上一级目录\nmkdir创建目录\n-p创建多级目录\nrmdir删除目录\nrmdir[选项]要删除的空目录\nrmdir删除的是空目录，如果目录下有内容时无法删除的\n如果删除非空目录使用rm-rf\ntouch创建空文件\ntouch 文件名\n-r递归复制整个文件夹\nmv源目录与新目录相同(重命名)\nmv/temp/movefile/targetFolder(移动文件)\ncat指令 查看文件内容但不能修改\ncat[选项]要查看的文件\n-n:显示行号\ncat只能浏览文件，而不能修复文件，为了浏览方便，一般会带上管道命令|more\ncat -n/etc/profile |more [进行]\nmore要查看的文件\n空格键代表向下翻一页\nenter代表向下翻一行\nq代表立即离开more，不再显示该文件内容\nctrl+f向下滚动一屏\nctrl+b返回上一屏\n=输出当前行的行号\n:f输出文件名和当前行的行号\nless指令\nless指令用来分屏查看文件内容，它的功能与more指令类似，但是比more指令更加强大，支持各位显示终端。less指令在显示文件内容时，并不是一次将整个文件加载之后才显示，而是根据显示需要加载内容，对于显示大型文件具有较高的效率\n操作说明\n空白键 向下翻动一页\npagedown 向下反动一页\npageup 向上翻动一页\n/字串 向下搜寻【字串】的功能；n:向下查找；N：向上查找\n?字串 向上搜寻【字串】的功能；n：向上查找；N向下查找\nq 离开less这个程序\necho指令\necho输出内容到控制台\necho [选项][输出内容]\nhead指令\nhead用于显示文件的开头部分内容，默认情况下显示文件的前十行内容\nhead文件名 查看文件头10行内容\nhead -n 5 文件名 查看文件头5行内容 5可以是任意行数\ntail指令\ntail用于输出文件中尾部的内容，默认情况下tail指令显示文件的前10行内容\ntail 文件名 查看文件尾10行内容\ntail -n 5 文件名 查看文件尾5行内容，5可以是任意行数\ntail -f 文件名 实时追踪该文档的所有更新\n指令\n追加\nls -l \u0026gt;文件 列表的内容写入a.txt中(覆盖写)\nls -al\u0026raquo;文件列表的内容追加到文件aa.txt的末尾\ncat文件1\u0026gt;文件2 将文件1的内容覆盖到文件2\necho “内容”\u0026raquo;文件\nls -l /home\u0026gt;/home/info.txt如果info.txt没有，则会创建\nln 指令 软连接也称符号链接类似于windows的快捷方式\nln -s[源文件或目录][软链接名] 给源文件创建一个软连接\nhistory指令\n查看已执行过历史命令，也可以执行历史指令\ndate指令-显示当前日期\ndate 显示当前时间\ndate+%Y 显示当前年份\ndate+%m 显示当前月份\ndate+%d 显示当前是哪一天\ndate \u0026ldquo;+%Y-%m-%d%H:%M:%S\u0026rdquo; 显示年月日时分秒\n设置日期 date -s字符串时间\ncal指令\ncal [选项]\nls用法\nls [选项] [文件]\n【 -f 】不排序目录内容；按它们在磁盘上存储的顺序列出。同时启 动“ -a ”选项\n【 -1 】每行显示一条记录，即单列展示数据\n【 -l 】长列表显示文件和目录，包括文件类型、大小、修改日期和时间、权限等信息\n【 -lh 】人性化显示文件大小\n【 -F 】 使用不同特殊字符归类不同的文件类型\n【 -ld 】长列表格式列出某个目录的信息\n【 -R 】递归地列出子目录的内容\n【 -ltr 】将长列表格式按文件或目录的修改时间 倒序地 列出文件和目录\n【 -ls 】将长列表格式按文件大小顺序列出文件和目录\n【 -a 】显示包括隐藏文件或目录在内的所有文件和目录，包括 “.“（当前目录），“…“（父目录\n【 -A 】显示包括隐藏文件或目录在内的所有文件和目录，但不列出 “.” (目前目录)及 “…” (父目录)\n【 -i 】显示文件或目录的 inode 编号，可能会用在系统维护操作时\n【 -n 】显示uid 和 gid ，代替显示所有者和用户组\nfind[搜索范围] [选项]\n-name按照指定的文件名查找模式查找文件\n-user查找属于指定用户名所有文件\n-size按照指定的文件大小查找文件+n大于 -n小于 n等于不加n也是等于 单位有k,M,G\n由于locate指令基于数据库进行查询，所以第一次运行前，必须使用updatedb指令创建locate数据库\ngrep[选项]查找内容 源文件\n-n显示匹配行及行号。\n-i忽略字母大小写\ngzip文件压缩文件 只能将文件压缩为*.gz\ngunzip文件.gz解压缩文件命令\nzip [选项]XXX.zip 压缩内容\nunzip[选项]XXX.zip 解压缩文件\nzip常用选项\n-r:递归压缩，即压缩目录\ngunzip常用选项\n-d指定解压后文件的存放目录\ntar[选项]XXX.tar.gz 打包内容\n-c产生.tar打包文件\n-v显示详细信息\n-f指定压缩后的文件名\n-z打包同时压缩\n-x解压.tar文件\n-C解压到的目录\ntar -zxvf /home/myhome.tar.gz -C /opt/tmp2 查看文件的所有者\nls -ahl\n修改文件所有者\nchown 用户名文件名\n-R递归修改\n基本指令\ngroupadd 组名\n文件/目录所在组\n当某个用户创建了一个文件后，这个文件的所在组就是该用户所在的组\n查看文件或目录所在组\nls -ahl 文件/目录名\n修改文件所在组\nchgrp 新组名 文件名\n-R 递归修改\n其他组\n除文件的所有者和所在组的用户外，系统的其他用户都是文件的其他组\n改变用户所在组\n在添加用户时，可以指定将该用户添加到那个组中，同样的用root的管理权限可以改变某个用户所在的组\n1.usermod -g 新组名 用户名\n2.usermod -d 目录名 用户名 改变该用户登录的初始目录 用户需要有到新目录的权限\nls-l中显示的内容如下:\n-rw-r\u0026ndash;r\u0026ndash;.1 root root 0 6月 1 17:39 pig.txt\n0-9位说明\n1.第0位确定文件类型(d,-,l,c,b)\nl是链接，相当于windows的快捷方式\nd是目录，相当于windows的文件夹\nc是字符设备文件，鼠标，键盘\nb是块设备，比如硬盘\n2.第1-3位确定所有者(该文件的所有者)拥有该文件的权限\u0026ndash;User\n3.第4-6位确定所属组(同用户组的)拥有该文件的权限，\u0026ndash;Group\n4.第7-9位确定其他用户拥有该文件的权限\u0026ndash;Other\n第一种方式：+、-、=变更权限\nu:所有者g:所有组 o:其他人 a:所有人(u、g、o的总和)\n1）chmodu=rwx,g=rx,o=x 文件/目录名\n2）chmodo+w 文件/目录名(给当前文件的其他用户单独添加写权限)\n3）chmoda-x 文件/目录名(给当前文件的所有用户删除执行权限)\n第二种方式：通过数字变更权限\nr=4，w=2，x=1rwx=4+2+1=7\nchmodu=rwx,g=rx,o=x 文件/目录名(相当于chmod 751 文件目录名)\nchown新所有者:新组 文件/目录 改变所有者和所在组\n-R如果是目录，则使其下所有子文件或目录递归生效\ncrontab[选项]\n-e编辑crontab定时任务\n-l查询crontab任务\n-r删除当前用户所有的crontab\n参数细节说明\n如*/1****ls-l /etc/ \u0026gt; /tmp/to.txt 意思说每小时的每分钟执行ls -l /etc/ \u0026gt; /tmp/to.txt ps -ef查看当前运行的所有进程\nps -ef |grep atd 检查atd是否在运行\nat命令选项\nCtrl+D结束at命令的输入，输入两次才能退出\n虚拟机添加硬盘步骤2\n分区命令 fdisk/dev/sdb\n开始对/sdb分区\nm 显示命令列表\np 显示磁盘分区同fdisk -l\nn 新增分区\nd 删除分区\nw 写入并退出\n说明：开始分区后输入n，新增分区，然后选择p，分区类型为主分区。两次回车默认剩余全部空间。最后输入w写入分区并退出，若不保存退出输入q\n虚拟机添加硬盘步骤3\n其中ext4是分区类型\n虚拟机添加硬盘步骤4\n挂载：将一个分区与一个目录联系起来\nmount 设备名称挂载目录\n例如：mount/dev/sdb1 /newdisk\n卸载 umount设备名称或者挂载目录\n例如：umount/dev/sdb1或者umount /newdisk\n虚拟机添加硬盘步骤5\n永久挂载：通过修改/etc/fstab实现挂载\n添加完成后执行mount -a 即刻生效\n磁盘整体使用情况查询\ndf -h\n查询指定目录的磁盘使用情况\ndu -h /目录\n查询指定目录的磁盘占用情况，默认为当前目录\n-s指定目录占用大小汇总\n-h 带计量单位\n-a 含文件\n\u0026ndash;max-depth=1子目录深度\n-c列出明细的同时，增加汇总值\n查看linux的网络配置(ifconfig指令) 使用ping指令来判断网络连通性 [root@localhost network-scripts]# cat ifcfg-ens33 TYPE=\u0026#34;Ethernet\u0026#34; #网卡类型（通常是Ethemet以太网） PROXY_METHOD=\u0026#34;none\u0026#34; #代理方式：为关闭状态 BROWSER_ONLY=\u0026#34;no\u0026#34; #只是浏览器：否 BOOTPROTO=\u0026#34;static\u0026#34; #网卡的引导协议【static：静态IP dhcp：动态IP none：不指定，不指定容易出现各种各样的网络受限】 DEFROUTE=\u0026#34;yes\u0026#34; #默认路由 IPV4_FAILURE_FATAL=\u0026#34;no\u0026#34; #是否开启IPV4致命错误检测 IPV6INIT=\u0026#34;yes\u0026#34; #IPV6是否自动初始化：是（现在还未用到IPV6，不会有任何影响） IPV6_AUTOCONF=\u0026#34;yes\u0026#34; #IPV6是否自动配置：是（现在还未用到IPV6，不会有任何影响） IPV6_DEFROUTE=\u0026#34;yes\u0026#34; #IPV6是否可以为默认路由：是（现在还未用到IPV6，不会有任何影响） IPV6_FAILURE_FATAL=\u0026#34;no\u0026#34; #是否开启IPV6致命错误检测 IPV6_ADDR_GEN_MODE=\u0026#34;stable-privacy\u0026#34; #IPV6地址生成模型 NAME=\u0026#34;ens33\u0026#34; #网卡物理设备名称 UUID=\u0026#34;ab60d501-535b-49f5-a76b-3336a4120f64\u0026#34;#通用唯一识别码，每一个网卡都会有，不能重复，否则两台linux机器只有一台可上网 DEVICE=\u0026#34;ens33\u0026#34; #网卡设备名称，必须和‘NAME’值一样 ONBOOT=\u0026#34;yes\u0026#34; #是否开机启动，要想网卡开机就启动或通过 `systemctl restart network`控制网卡,必须设置为 `yes` IPADDR=192.168.137.129 # 本机IP NETMASK=255.255.255.0 #子网掩码 GATEWAY=192.168.137.2 #默认网关 DNS1=8.8.8.8# DNS2=8.8.8.5# ZONE=public# [root@localhost network-scripts]# service network restart #重启网卡 Restarting network (via systemctl): [ 确定 ] [root@localhost network-scripts]# 设置主机名和hosts映射\n设置主机名\n为了方便记忆，可以给linux系统设置主机名，也可以根据需要修改主机名 指令hostname 查看主机名 修改文件在 /etc/hostname指定 修改后重启生效 设置hosts映射\n作用:通过主机名找到(比如ping)某个linux系统\nWindows\n在C:\\Windows\\System32\\driver\\etc\\hosts文件指定即可\n案例:192.168.200.130 admin-pc Linux\n在/etc/hosts文件指定\n案例:192.168.200.1 admin-pc 主机名解析过程分析(Hosts、DNS)\nhosts是什么\n一个文本文件，用来记录IP和HOSTNAME(主机名)的映射关系 DNS DNS，就是Domain Name System的缩写，翻译过来就是域名系统 是互联网上作为域名和IP地址相互映射的一个分布式数据库 PS命令 显示系统执行的进程\n基本介绍\nps命令是用来查看目前系统中，有哪些正在执行，以及它们执行的状况，可以不加任何参数\nps-a 显示当前终端的所有进程信息\nps-u 以用户的格式显示进程信息\nps-x 显示后台进程运行的参数\nps详解\n指令：ps -aux|grep sshd,比如我看看有没有sshd服务 指令说明 System V展示风格 USER 用户名称 PID 进程号 %CPU进程占用CPU的百分比 %MEM 进程占用物理内存的百分比 VSZ 进程占用的虚拟内存大小(单位:KB) RSS 进程占用的物理内存大小(单位:KB) TT 终端名称，缩写 STAT 进程状态，其中S-睡眠，s-表示该进程是会话的先导进程，N-表示进程拥有比普通优先级更低的优先级，R-正在运行，D-短期等待，Z-僵死进程，T-被跟踪或者被停止 STARTED 进程的启动时间 TIME CPU时间，即进程使用CPU的总时间 COMMAND 启动进程所用的命令和参数，如果过长会被截断显示 kill [选项]进程号 killall 进程名称 -9：表示强迫进程立即停止\n终止多个gedit，演示 killall gedit\n查看进程树pstree\npstree[选项]，可以更加直观的来看进程信息\n常用选项\n-p:显示进程的pid\n-u:显示进程的所属用户\n服务(service)本质就是进程，但是是运行在后台的，通常都会监听某个端口，等待其他程序的请求，比如(mysqld，sshd，防火墙等)，因此我们又称为守护进程，是linux中非常重要的知识点\nserver管理指令 service 服务名[start|stop|restart|reload|status] 在Centos7.0后很多服务不再使用service，而是systemctl service指令管理的服务在/etc/init.d查看 服务的运行级别(runlevel) Linux系统有7种运行级别(runlevel)：常用的是3跟5 运行级别0：系统停机状态，系统默认运行级别不能设为0，否则不能正常启动\n运行级别1：单用户工作状态，root权限，用于系统维护，禁止远程登录\n运行级别2：多用户状态(没有NFS)，不支持网络\n运行级别3：完全的多用户状态(有NFS),登录后进入控制台命令行模式\n运行级别4：系统未使用，保留\n运行级别5：X11控制台，登录后进入图形GUI模式\n运行级别6：系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启动\n开机的流程说明: l 设置运行级别\nsystemctl get-default #获取当前的运行级别\nsystemctl set-default xxx #设置默认的运行级别为xxx\n目前一般使用级别3跟5\nmulti-user.target:analogous to runlevel 3\nsystemctl set-default multi-user.target\ngraphical.target:analogous to runlevel 5\ninit 0\nl systemctl管理指令\n○ systemctl设置服务的自启动状态\n1.systemctl list-unit-files [|grep服务名] 查看服务开机启动状态，grep可以进行过滤\n2.systemctl enable 服务名 （设置服务开机启动）\n3.systemctl disable 服务名 （关闭服务开机启动）\n4.systemctl is-enabled 服务名 （查询某个服务是否是自启动的）\nl firewall指令\n○ 打开端口：firewall-cmd \u0026ndash;permanent \u0026ndash;add-port=端口号/协议\n关闭端口：firewall-cmd \u0026ndash;permanent \u0026ndash;remove-port=端口号/协议\n重新载入：firewall-cmd \u0026ndash;reload\n查询端口是否开放：firewall-cmd \u0026ndash;query-port=端口/协议\ntop与ps命令很相似，它们都用来显示正在执行的惊醒。top与ps最大的不同之处，在于top在执行一段时间可以更新正在运行的进程\n基本语法 top[选项]\n选项说明 交互操作说明： 查看系统网络情况netstat 基本语法 netstat[选项]\n选项说明 -an 按一定顺序排列输出\n-p 显示哪个进程在调用\n应用案例 请查看服务名为sshd服务的信息\n检测主机链接命令ping ping是一种网络监测检测工具，它主要是用检测远程主机是否正常，或是两部主机间的网线或网卡故障\n查询已安装的rpm列表 rpm -qa|grep xx\nrpm包名基本格式 一个rpm包名：firefox-60.2.2-1.el7.centos.x86_64\n表示centos7.x的64位系统\n如果是i686、i386表示32位系统、noarch表示通用\nrpm包的其他查询指令 rpm -qa：查询所安装的所有rpm软件包\nrpm -qa|more\nrpm -qa| grep X[rpm -qa |grep firefox]\nrpm -q 软件包名：查询软件包是否安装\n案例：rpm -q |firefox\nrpm -qi软件包名：查询软件包信息\n案例：rpm -qi firefox\nrpm -ql 软件包名：查询软件包中的文件\n比如：rpm -ql firefox\nrpm -qf 文件全路径名 查询文件所属的软件包\nrpm -qf /etc/passwd\nrpm -qf /root/install.log\n参数说明 i=install 安装\nv=verbose提示\nh=hash 进度条\n卸载rpm包 rpm -e RPM包的名称\n如果其他软件包依赖于你要卸载的软件包，卸载时则会产生错误信息\n如 rpm-e foo\nremoving these packages would breakdependencies:foo is needed by bar-1.0-1\n如果我们就是要删除foo这个软件包，可以增加参数\u0026ndash;nodeps，就可以强制删除，但是一般不推荐这样做，因为依赖于该软件包的程序可能无法运行\n如 rpm-e \u0026ndash;nodeps foo\nyum list|grep xx软件列表\n安装指定的yum包\nyum install xxx下载安装\nmv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup 下载新的 CentOS-Base.repo 到 /etc/yum.repos.d/ CentOS 6\nwget -O /etc/yum.repos.d/CentOS-Base.repo [https://mirrors.aliyun.com/repo/Centos-6.repo](https://mirrors.aliyun.com/repo/Centos-6.repo) 或者\ncurl -o /etc/yum.repos.d/CentOS-Base.repo [https://mirrors.aliyun.com/repo/Centos-6.repo](https://mirrors.aliyun.com/repo/Centos-6.repo) CentOS 7\nwget -O /etc/yum.repos.d/CentOS-Base.repo [https://mirrors.aliyun.com/repo/Centos-7.repo](https://mirrors.aliyun.com/repo/Centos-7.repo) 或者\ncurl -o /etc/yum.repos.d/CentOS-Base.repo [https://mirrors.aliyun.com/repo/Centos-7.repo](https://mirrors.aliyun.com/repo/Centos-7.repo) CentOS 8\nwget -O /etc/yum.repos.d/CentOS-Base.repo [https://mirrors.aliyun.com/repo/Centos-8.repo](https://mirrors.aliyun.com/repo/Centos-8.repo) 或者\ncurl -o /etc/yum.repos.d/CentOS-Base.repo [https://mirrors.aliyun.com/repo/Centos-8.repo](https://mirrors.aliyun.com/repo/Centos-8.repo) 运行 yum makecache 生成缓存 其他 非阿里云ECS用户会出现 Couldn\u0026rsquo;t resolve host \u0026lsquo;mirrors.cloud.aliyuncs.com\u0026rsquo; 信息，不影响使用。用户也可自行修改相关配置: eg:\nsed -i -e \u0026#39;/mirrors.cloud.aliyuncs.com/d\u0026#39; -e \u0026#39;/mirrors.aliyuncs.com/d\u0026#39; /etc/yum.repos.d/CentOS-Base.repo mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup 获取对应版本的CentOS-Base.repo 到/etc/yum.repos.d/目录\n各版本源配置列表\nCentOS5\nwget -O /etc/yum.repos.d/CentOS-Base.repo [http://mirrors.cloud.tencent.com/repo/centos5_base.repo](http://mirrors.cloud.tencent.com/repo/centos5_base.repo) CentOS6\nwget -O /etc/yum.repos.d/CentOS-Base.repo [http://mirrors.cloud.tencent.com/repo/centos6_base.repo](http://mirrors.cloud.tencent.com/repo/centos6_base.repo) CentOS7\nwget -O /etc/yum.repos.d/CentOS-Base.repo [http://mirrors.cloud.tencent.com/repo/centos7_base.repo](http://mirrors.cloud.tencent.com/repo/centos7_base.repo) CentOS8\nwget -O /etc/yum.repos.d/CentOS-Base.repo [http://mirrors.cloud.tencent.com/repo/centos8_base.repo](http://mirrors.cloud.tencent.com/repo/centos8_base.repo) 更新缓存\nyum clean all yum makecache 命令含义： \u0026ndash;zone #作用域 \u0026ndash;add-port=80/tcp #添加端口，格式为：端口/通讯协议 \u0026ndash;permanent #永久生效，没有此参数重启后失效\n\u0026lt;h2 id=\u0026#34;tEfI5\u0026#34;\u0026gt;注册系统服务\u0026lt;/h2\u0026gt; \u0026lt;font style=\u0026#34;color:rgb(86, 86, 86);\u0026#34;\u0026gt;到\u0026lt;/font\u0026gt;_\u0026lt;font style=\u0026#34;color:rgb(86, 86, 86);\u0026#34;\u0026gt;/usr/lib/systemd/system\u0026lt;/font\u0026gt;_\u0026lt;font style=\u0026#34;color:rgb(86, 86, 86);\u0026#34;\u0026gt;目录下。\u0026lt;/font\u0026gt; \u0026lt;font style=\u0026#34;color:rgb(86, 86, 86);\u0026#34;\u0026gt;单击新建，选择新建空白文件，文件名填 \u0026lt;/font\u0026gt;_\u0026lt;font style=\u0026#34;color:rgb(86, 86, 86);\u0026#34;\u0026gt;cloudreve.service\u0026lt;/font\u0026gt;_\u0026lt;font style=\u0026#34;color:rgb(86, 86, 86);\u0026#34;\u0026gt; 。\u0026lt;/font\u0026gt; \u0026lt;font style=\u0026#34;color:rgb(86, 86, 86);\u0026#34;\u0026gt;将下文 \u0026lt;/font\u0026gt;_\u0026lt;font style=\u0026#34;color:rgb(86, 86, 86);\u0026#34;\u0026gt;PATH_TO_CLOUDREVE\u0026lt;/font\u0026gt;_\u0026lt;font style=\u0026#34;color:rgb(86, 86, 86);\u0026#34;\u0026gt; 更换为程序所在目录，复制到新建的文件中并\u0026lt;/font\u0026gt;**\u0026lt;font style=\u0026#34;color:rgb(86, 86, 86);\u0026#34;\u0026gt;保存\u0026lt;/font\u0026gt;**\u0026lt;font style=\u0026#34;color:rgb(86, 86, 86);\u0026#34;\u0026gt;。\u0026lt;/font\u0026gt; ```basic [Unit] Description=Cloudreve Documentation=https://docs.cloudreve.org After=network.target Wants=network.target [Service] WorkingDirectory=/PATH_TO_CLOUDREVE ExecStart=/PATH_TO_CLOUDREVE/cloudreve Restart=on-abnormal RestartSec=5s KillMode=mixed StandardOutput=null StandardError=syslog [Install] WantedBy=multi-user.target 然后在服务器中先后执行下面的命令\n# 更新配置 systemctl daemon-reload # 启动服务 systemctl start cloudreve # 设置开机启动 systemctl enable cloudreve ","permalink":"http://localhost:1313/posts/centosbasic/","summary":"Centos基础语法","title":"Centos基础语法"},{"content":"前言 一直想把网站的懒加载图片换掉，因为主题默认的是个骷髅图片，自己不喜欢。但是我又不知道去哪儿找，网上找的一些不是图片模糊就是样式不喜欢。这里要感谢@困困鱼提供的图片，样式都很不错，专门收藏下来。\n加载图片\n","permalink":"http://localhost:1313/posts/loadinggif/","summary":"收藏几个动态懒加载图片","title":"收藏几个动态懒加载图片"},{"content":"Shell 脚本中关键字很多，常见的包括：\n语句/命令 描述 if 条件语句，用于根据条件执行不同的命令。 else 条件语句的补充，当if语句中的条件不满足时执行。 elif 条件语句的补充，用于添加多个条件判断。 then 条件语句的结束符号，表示条件判断结束。 for 循环语句，用于对一组数据进行迭代操作。 while 循环语句，根据条件执行循环体内的命令。 until 循环语句，根据条件不满足时执行循环体内的命令。 case 条件语句，用于根据不同的值执行不同的命令。 in 用于在case语句中指定多个值。 do 循环语句的开始符号，表示循环体的开始。 done 循环语句的结束符号，表示循环体的结束。 function 定义函数，用于封装一段代码并在脚本中多次调用。 select 菜单语句，用于生成一个菜单供用户选择。 time 用于计算命令执行的时间。 exit 用于退出脚本或函数。 export 用于将环境变量导出到子进程中。 readonly 用于将变量设置为只读，不能被修改。 unset 用于删除变量或函数。 source 用于在当前Shell中执行脚本文件，类似于./命令。 return 用于从函数中返回一个值。 trap 用于捕获信号或错误，并在捕获到时执行相应的命令。 wait 用于等待后台运行的进程结束。 exec 用于替换当前Shell进程为指定的命令。 alias 用于创建命令别名。 set 用于设置Shell选项和环境变量。 unset 用于删除Shell选项和环境变量。 shift 用于在命令行参数中向左移动一个位置。 test 用于条件测试，类似于if语句中的条件判断。 ","permalink":"http://localhost:1313/posts/shellkeywords/","summary":"Shell关键字","title":"Shell关键字"},{"content":"VMware OVF Tool导出虚拟机 1安装VMware-ovftool-4.3.0-12320924-win.x86_64.msi\n2进入安装目录 C:\\Program Files\\VMware\\VMware OVF Tool\\ 输入cmd进入命令提示符\n`\novftool vi://root:@192.168.1.10/RockyLinuxServer E:\\ovf\\RockyLinuxServer.ova ovftool vi://root:@192.168.1.10/WindowsServer2022 E:\\ovf\\WindowsServer2022.ova ovftool vi://root:@192.168.1.10/DSM920 E:\\ovf\\DSM920.ova `\nESXI直通板载SATA控制器 1查看”设备ID“和“供应商ID”\n2SSH，不细表\n3打开直通映射文件：\nvi /etc/vmware/passthru.map 编辑如下内容： \\# Union Point-H AHCI Controller \\# \u0026lt;供应商ID\u0026gt; \u0026lt;设备ID\u0026gt; d3d0 default 8086 a282 d3d0 default 重启ESXi\n选中 Union Point-H AHCI Controller，点击“切换直通”，大功告成\n修改ESXI的证书 连接SSH 进入 /etc/vmware/ssl 目录，找到 rui.key,rui.crt (注意备份原证书)选中删除，将之前修改好的ssl证书复制到该目录\n如果不想重启esxi主机，可以在SSH下输入：\n/etc/init.d/hostd restart /etc/init.d/vpxa restart ","permalink":"http://localhost:1313/posts/esxi/","summary":"vSphere Hypervisor(ESXI)","title":"vSphere Hypervisor(ESXI)"},{"content":"存放于/root目录下\n#!/bin/bash sleep 30 # 备份原始文件 sudo cp /etc/docker/daemon.json /etc/docker/daemon.json.bak # 使用 jq 添加新的键值对并写入临时文件 sudo jq \u0026#39;. + { \u0026#34;registry-mirrors\u0026#34;: [\u0026#34;https://docker.1panel.live\u0026#34;] }\u0026#39; /etc/docker/daemon.json | sudo tee /etc/docker/daemon.json.tmp \u0026gt; /dev/null # 检查 jq 是否成功 if [ $? -eq 0 ]; then # 替换原始文件 sudo mv /etc/docker/daemon.json.tmp /etc/docker/daemon.json echo \u0026#34;成功更新 daemon.json 文件。\u0026#34; else echo \u0026#34;更新 daemon.json 文件失败，恢复备份。\u0026#34; sudo mv /etc/docker/daemon.json.bak /etc/docker/daemon.json fi # 重启 Docker 服务 sudo systemctl restart docker ","permalink":"http://localhost:1313/posts/truenasdaemondocker/","summary":"TrueNAS24.10docker开机自动替换源","title":"TrueNAS24.10docker开机自动替换源"}]